#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

# Defaults
size      = 10 * 1024 ** 2
count     = 10
fsync     = false
timestamp = false
gzip      = false

oparser = OptionParser.new do |opts|
  opts.banner = "usage: #$0 [-s SIZE[k|m|g]] [-n #FILES] [-f] [-t] [-z] FILENAME"
  opts.on('-s SIZE', 'Maximum size of each file') do |s|
    num, suffix = s[0...-1], s[-1, 1]
    size =
      (num.to_f * 1024 ** (
        case s[-1, 1]
        when /k/i then 1
        when /m/i then 2
        when /g/i then 3
        else
          puts opts
          exit
        end)).to_i

    unless size > 0
      puts opts
      exit
    end
  end

  opts.on('-n COUNT', 'Number of files') do |n|
    unless (count = n.to_i) > 0
      puts opts
      exit
    end
  end

  opts.on('-f', 'fsync immediately') do |f|
    fsync = true
  end

  opts.on('-t', 'Prepend timestamp') do |t|
    timestamp = t
  end

  opts.on('-z', 'Gzip archive log') do |z|
    raise RuntimeError, 'gzip executable not found' if `which gzip`.empty?
    gzip = z
  end
end

oparser.parse!

if ARGV.length != 1
  puts oparser
  exit
end

def ymd
  Time.now.strftime("%Y/%m/%d %H:%M:%S")
end

def on_error x
  $stderr.puts "[#{ymd}] ERROR: #{x.inspect}"
  $stderr.puts x.backtrace
end

prefix = ARGV.first
while true
  begin
    bytes = File.exists?(prefix) && File.size?(prefix) || 0
    file  = File.open(prefix, 'a')
    pat   = /([0-9]+)(\.gz)?$/

    begin
      while line = $stdin.gets
        line = "[#{ymd}] #{line}" if timestamp

        bytes += line.length
        if bytes > size
          file.close rescue nil

          # Rotate files
          Dir["#{prefix}.*"].select { |fn| fn =~ pat }.map { |fn|
            if md = fn.match(pat)
              [fn, md[1].to_i, md[2]]
            end
          }.compact.sort_by { |e| - e[1] }.each do |triplet|
            fn, index, suffix = triplet
            if index < count
              FileUtils.mv(fn, [prefix, '.', index + 1, suffix].join) rescue nil
            end
          end
          dest = [prefix, 1].join('.')
          FileUtils.mv(prefix, dest) rescue nil
          system("gzip #{dest}") if gzip

          # Reset
          file  = File.open(prefix, 'a')
          bytes = line.length
        end

        file << line
        if fsync
          file.fsync
        else
          file.flush
        end
      end
      break
    rescue Exception => e
      on_error e
    ensure
      file.close rescue nil
    end
  rescue Exception => e
    on_error e
  end

  $stderr.puts "[#{ymd}] Restarting pipe-logger in 1 second"
  sleep 1
end

